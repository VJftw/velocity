syntax = "proto3";
package velocity.v1;

option go_package = "v1";

import "api.proto";
import "google/api/annotations.proto";

message Head {
  // HEAD_ID=head_name
  string id = 1;
  string project_id = 2;
}

message Commit {
  // COMMIT_ID=commit_sha
  string id = 1;
  string project_id = 2;
}

message Repository {
  string address = 1;
  SSHConfig ssh_config = 2;
}

message SSHConfig {
  string private_key = 1;
  string host_key = 2; // known_host
}

service RepositoryService {
  rpc GetHead(GetHeadRequest) returns (Head) {
    option (google.api.http) = {
      get : "/v1/{name=projects/*/heads/*}"
    };
  }

  rpc GetCommit(GetCommitRequest) returns (Commit) {
    option (google.api.http) = {
      get : "/v1/{name=projects/*/commits/*}"
    };
  }

  rpc ListHeads(ListHeadsRequest) returns (ListHeadsResponse) {
    option (google.api.http) = {
      get : "/v1/{name=projects/*}/heads"
    };
  }

  rpc ListCommits(ListCommitsRequest) returns (ListCommitsResponse) {
    option (google.api.http) = {
      get : "/v1/{name=projects/*}/commits"
    };
  }
}

message GetHeadRequest {
  // The id of the project in the form of
  // `[PROJECT_ID]`.
  string project_id = 1;
  // The id of the project in the form of
  // `[HEAD_ID]`.
  string head_id = 2;
}

message GetCommitRequest {
  // The id of the project in the form of
  // `[PROJECT_ID]`.
  string project_id = 1;
  // The id of the commit in the form of
  // `[COMMIT_ID]`.
  string commit_id = 2;
}

message RepoQuery {
  enum Type {
    HEAD = 0;
    COMMIT = 1;
  }
  Type type = 1;
  repeated string ids = 2;
}

message ListHeadsRequest {
  // The id of the project in the form of
  // `[PROJECT_ID]`.
  string project_id = 1;

  // The ids of the commits in the form of
  // `[COMMIT_ID]`.
  repeated string commit_ids = 2;

  velocity.v1.PageQuery page_query = 99;
}

message ListHeadsResponse { repeated Head heads = 1; }

message ListCommitsRequest {
  // The id of the project in the form of
  // `[PROJECT_ID]`.
  string project_id = 1;

  // The ids of the heads in the form of
  // `[HEAD_ID]`.
  repeated string head_ids = 2;

  velocity.v1.PageQuery page_query = 99;
}

message ListCommitsResponse { repeated Commit commits = 1; }