syntax = "proto3";
package velocity.v1;

option go_package = "v1";

import "api.proto";
import "repository.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message Project {
  string id = 1;
  string name = 2;
  velocity.v1.Repository repository = 3;

  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

service ProjectService {
  rpc CreateProject(CreateProjectRequest) returns (Project) {
    option (google.api.http) = {
      post : "/v1/projects"
      body : "project"
    };
  }

  rpc GetProject(GetProjectRequest) returns (Project) {
    option (google.api.http) = {
      get : "/v1/{name=projects/*}"
    };
  }

  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get : "/v1/projects"
    };
  }

  rpc GetHead(velocity.v1.GetHeadRequest) returns (velocity.v1.Head) {
    option (google.api.http) = {
      get : "/v1/{name=projects/*/heads/*}"
    };
  }

  rpc GetCommit(velocity.v1.GetCommitRequest) returns (velocity.v1.Commit) {
    option (google.api.http) = {
      get : "/v1/{name=projects/*/commits/*}"
    };
  }

  rpc ListHeads(velocity.v1.ListHeadsRequest) returns (velocity.v1.ListHeadsResponse) {
    option (google.api.http) = {
      get : "/v1/{name=projects/*}/heads"
    };
  }

  rpc ListCommits(velocity.v1.ListCommitsRequest) returns (velocity.v1.ListCommitsResponse) {
    option (google.api.http) = {
      get : "/v1/{name=projects/*}/commits"
    };
  }
}

message CreateProjectRequest {
  string name = 1;
  velocity.v1.Repository repository = 2;
}

message GetProjectRequest {
  // The id of the project in the form of
  // `[PROJECT_ID]`.
  string project_id = 1;
}

message ListProjectsRequest {
  repeated string ids = 1;
  repeated string names = 2;
  // repeated string hosts = 3;
  // repeated string addresses = 4;
  // created_at;

  velocity.v1.PageQuery page_query = 99;
}

message ListProjectsResponse { repeated Project projects = 1; }
