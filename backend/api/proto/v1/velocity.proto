syntax = "proto3";
package velocity.v1;

option go_package = "v1";

import "repository.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// TODO(vj): Check out google api gen(see grafeas for example)
// TODO(vj): hash composite keys

service VelocityService {
  rpc CreateProject(CreateProjectRequest) returns (Project) {
    option (google.api.http) = {
      post: "/v1/projects"
      body: "project"
    };
  }

  rpc GetProject(GetProjectRequest) returns (Project) {
    option (google.api.http) = {
      get: "/v1/{name=projects/*}"
    };
  }

  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/v1/projects"
    };
  }

  rpc GetBlueprint(GetBlueprintRequest) returns (Blueprint) {
    option (google.api.http) = {
      get: "/v1/{name=projects/*/blueprints/*}"
    };
  }

  rpc ListBlueprints(ListBlueprintsRequest) returns (ListBlueprintsResponse) {
    option (google.api.http) = {
      get: "/v1/{name=projects/*}/blueprints"
    };
  }

  rpc CreateBuild(CreateBuildRequest) returns (Build) {
    option (google.api.http) = {
      post: "/v1/{name=projects/*}/builds"
      body: "build"
    };
  }

  rpc GetBuild(GetBuildRequest) returns (Build) {
    option (google.api.http) = {
      get: "/v1/{name=projects/*/builds/*}"
    };
  }

  rpc ListBuilds(ListBuildsRequest) returns (ListBuildsResponse) {
    option (google.api.http) = {
      get: "/v1/{name=projects/*}/builds"
    };
  }

}

message Project {
  string id = 1;
  string name = 2;
  string address = 3;

  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message CreateProjectRequest {
  string name = 1;
  velocity.v1.Repository repository = 2;
}

message GetProjectRequest {
  // The id of the project in the form of
  // `[PROJECT_ID]`.
  string project_id = 1;
}

message ListProjectsRequest {
  repeated string ids = 1;
  repeated string names = 2;
  // repeated string hosts = 3;
  // repeated string addresses = 4;
  // created_at;

  PageQuery page_query = 99;
}

message ListProjectsResponse {
  repeated Project projects = 1;
}

message PageQuery {
  int32 limit = 1;
  int32 skip = 2;
}

message RepoQuery {
  enum RepoType {
    HEAD = 0;
    COMMIT = 1;
  }
  repeated string ids = 1;
}

message BlueprintQuery {
  repeated string ids = 1;
}

message Blueprint {
  // BLUEPRINT_ID = commit_sha+blueprint_name
  string id = 1;

  string commit_id = 2;
  string name = 3;



}

message GetBlueprintRequest {
  // The id of the project in the form of
  // `[PROJECT_ID]`.
  string project_id = 1;
  // The id of the blueprint in the form of
  // `[BLUEPRINT_ID]`.
  string blueprint_id = 2;
}

message ListBlueprintsRequest {
  RepoQuery repo_query = 1;
  PageQuery page_query = 99;
}

message ListBlueprintsResponse {
  repeated Blueprint blueprints = 1;
}

message Build {
  string id = 1;

  string project_id = 2;
  string head_id = 3;
  string blueprint_id = 4; // can get commit and heads via this

  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message CreateBuildRequest {
  // The id of the project in the form of
  // `[PROJECT_ID]`.
  string project_id = 1;
  // The id of the head in the form of
  // `[HEAD_ID]`. Can be blank if building a commit with no head.
  string head_id = 2;
  // The id of the blueprint in the form of
  // `[BLUEPRINT_ID]`.
  string blueprint_id = 3;
  map<string, string> parameters = 4;
}

message GetBuildRequest {
  // The id of the project in the form of
  // `[PROJECT_ID]`.
  string project_id = 1;
  // The id of the build in the form of
  // `[BUILD_ID]`.
  string build_id = 2;
}

message ListBuildsRequest {
  RepoQuery repo_query = 1;
  BlueprintQuery blueprint_query = 2;

  PageQuery page_query = 99;
}

message ListBuildsResponse {
  repeated Build builds = 1;
}