// Code generated by protoc-gen-go. DO NOT EDIT.
// source: project.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Project struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Repository           *Repository          `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{0}
}

func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *Project) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Project) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type CreateProjectRequest struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Repository           *Repository `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateProjectRequest) Reset()         { *m = CreateProjectRequest{} }
func (m *CreateProjectRequest) String() string { return proto.CompactTextString(m) }
func (*CreateProjectRequest) ProtoMessage()    {}
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{1}
}

func (m *CreateProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProjectRequest.Unmarshal(m, b)
}
func (m *CreateProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProjectRequest.Marshal(b, m, deterministic)
}
func (m *CreateProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProjectRequest.Merge(m, src)
}
func (m *CreateProjectRequest) XXX_Size() int {
	return xxx_messageInfo_CreateProjectRequest.Size(m)
}
func (m *CreateProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProjectRequest proto.InternalMessageInfo

func (m *CreateProjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateProjectRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type GetProjectRequest struct {
	// The id of the project in the form of
	// `[PROJECT_ID]`.
	ProjectId            string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProjectRequest) Reset()         { *m = GetProjectRequest{} }
func (m *GetProjectRequest) String() string { return proto.CompactTextString(m) }
func (*GetProjectRequest) ProtoMessage()    {}
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{2}
}

func (m *GetProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProjectRequest.Unmarshal(m, b)
}
func (m *GetProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProjectRequest.Marshal(b, m, deterministic)
}
func (m *GetProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectRequest.Merge(m, src)
}
func (m *GetProjectRequest) XXX_Size() int {
	return xxx_messageInfo_GetProjectRequest.Size(m)
}
func (m *GetProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectRequest proto.InternalMessageInfo

func (m *GetProjectRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type ListProjectsRequest struct {
	Ids                  []string   `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Names                []string   `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	PageQuery            *PageQuery `protobuf:"bytes,99,opt,name=page_query,json=pageQuery,proto3" json:"page_query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListProjectsRequest) Reset()         { *m = ListProjectsRequest{} }
func (m *ListProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*ListProjectsRequest) ProtoMessage()    {}
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{3}
}

func (m *ListProjectsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProjectsRequest.Unmarshal(m, b)
}
func (m *ListProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProjectsRequest.Marshal(b, m, deterministic)
}
func (m *ListProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsRequest.Merge(m, src)
}
func (m *ListProjectsRequest) XXX_Size() int {
	return xxx_messageInfo_ListProjectsRequest.Size(m)
}
func (m *ListProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsRequest proto.InternalMessageInfo

func (m *ListProjectsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ListProjectsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListProjectsRequest) GetPageQuery() *PageQuery {
	if m != nil {
		return m.PageQuery
	}
	return nil
}

type ListProjectsResponse struct {
	Projects             []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListProjectsResponse) Reset()         { *m = ListProjectsResponse{} }
func (m *ListProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*ListProjectsResponse) ProtoMessage()    {}
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{4}
}

func (m *ListProjectsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProjectsResponse.Unmarshal(m, b)
}
func (m *ListProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProjectsResponse.Marshal(b, m, deterministic)
}
func (m *ListProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsResponse.Merge(m, src)
}
func (m *ListProjectsResponse) XXX_Size() int {
	return xxx_messageInfo_ListProjectsResponse.Size(m)
}
func (m *ListProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsResponse proto.InternalMessageInfo

func (m *ListProjectsResponse) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func init() {
	proto.RegisterType((*Project)(nil), "velocity.v1.Project")
	proto.RegisterType((*CreateProjectRequest)(nil), "velocity.v1.CreateProjectRequest")
	proto.RegisterType((*GetProjectRequest)(nil), "velocity.v1.GetProjectRequest")
	proto.RegisterType((*ListProjectsRequest)(nil), "velocity.v1.ListProjectsRequest")
	proto.RegisterType((*ListProjectsResponse)(nil), "velocity.v1.ListProjectsResponse")
}

func init() { proto.RegisterFile("project.proto", fileDescriptor_8340e6318dfdfac2) }

var fileDescriptor_8340e6318dfdfac2 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0x65, 0xb7, 0x7d, 0xfb, 0x7a, 0xd2, 0x56, 0xed, 0x34, 0x50, 0x2b, 0x25, 0x4d, 0x62,
	0x84, 0x88, 0x38, 0xd8, 0x24, 0x08, 0x21, 0x90, 0x38, 0x94, 0x1e, 0x52, 0x24, 0x0e, 0xc5, 0x70,
	0xe2, 0x12, 0xb6, 0xf6, 0x92, 0x2e, 0x6a, 0xb2, 0xae, 0x77, 0x13, 0x14, 0xa1, 0x5e, 0xf8, 0x0a,
	0x7c, 0x34, 0xae, 0x1c, 0xf9, 0x1a, 0x48, 0xc8, 0xeb, 0xdd, 0x34, 0x4e, 0x9d, 0xc0, 0x6d, 0x3d,
	0xff, 0x7e, 0xcf, 0x33, 0x23, 0x19, 0xb6, 0x93, 0x94, 0x7f, 0xa6, 0x91, 0xf4, 0x93, 0x94, 0x4b,
	0x8e, 0x95, 0x09, 0xbd, 0xe4, 0x11, 0x93, 0x53, 0x7f, 0xd2, 0xa9, 0x39, 0x24, 0x61, 0x79, 0xbc,
	0xb6, 0x9b, 0xd2, 0x84, 0x0b, 0x26, 0x79, 0x3a, 0xd5, 0x91, 0x7b, 0x03, 0xce, 0x07, 0x97, 0x34,
	0x20, 0x09, 0x0b, 0xc8, 0x68, 0xc4, 0x25, 0x91, 0x8c, 0x8f, 0x84, 0xce, 0x36, 0x74, 0x56, 0x7d,
	0x9d, 0x8f, 0x3f, 0x05, 0x92, 0x0d, 0xa9, 0x90, 0x64, 0x98, 0xe4, 0x05, 0xde, 0x4f, 0x0b, 0x36,
	0xcf, 0x72, 0x34, 0xee, 0x80, 0xcd, 0x62, 0xd7, 0x6a, 0x5a, 0x6d, 0x27, 0xb4, 0x59, 0x8c, 0x08,
	0xeb, 0x23, 0x32, 0xa4, 0xae, 0xad, 0x22, 0xea, 0x8d, 0xcf, 0x00, 0x6e, 0x24, 0xb8, 0x6b, 0x4d,
	0xab, 0x5d, 0xe9, 0x1e, 0xf8, 0x73, 0x6a, 0xfd, 0x70, 0x96, 0x0e, 0xe7, 0x4a, 0xf1, 0x39, 0x40,
	0x94, 0x52, 0x22, 0x69, 0xdc, 0x27, 0xd2, 0x5d, 0x57, 0x8d, 0x35, 0x3f, 0x97, 0xe7, 0x1b, 0x79,
	0xfe, 0x7b, 0x23, 0x2f, 0x74, 0x74, 0xf5, 0xb1, 0xcc, 0x5a, 0xc7, 0x49, 0x6c, 0x5a, 0x37, 0xfe,
	0xde, 0xaa, 0xab, 0x8f, 0xa5, 0x17, 0x41, 0xf5, 0x44, 0xcd, 0xd1, 0x1e, 0x43, 0x7a, 0x35, 0xa6,
	0x42, 0xce, 0xac, 0x59, 0x4b, 0xad, 0xd9, 0xff, 0x6c, 0xcd, 0xeb, 0xc2, 0x5e, 0x8f, 0xca, 0x05,
	0x42, 0x1d, 0x40, 0x9f, 0xb4, 0x3f, 0x5b, 0xaa, 0xa3, 0x23, 0xaf, 0x63, 0x4f, 0xc2, 0xfe, 0x1b,
	0x26, 0x4c, 0x93, 0x30, 0x5d, 0xbb, 0xb0, 0xc6, 0x62, 0xe1, 0x5a, 0xcd, 0xb5, 0xb6, 0x13, 0x66,
	0x4f, 0xac, 0xc2, 0x46, 0xa6, 0x4e, 0xb8, 0xb6, 0x8a, 0xe5, 0x1f, 0xf8, 0x14, 0x20, 0x21, 0x03,
	0xda, 0xbf, 0x1a, 0xd3, 0x74, 0xea, 0x46, 0x4a, 0xeb, 0xdd, 0x82, 0xd6, 0x33, 0x32, 0xa0, 0x6f,
	0xb3, 0x6c, 0xe8, 0x24, 0xe6, 0xe9, 0x9d, 0x42, 0xb5, 0x48, 0x15, 0x09, 0x1f, 0x09, 0x8a, 0x8f,
	0xe1, 0x7f, 0x2d, 0x2d, 0x67, 0x57, 0xba, 0xd5, 0xe2, 0x30, 0xed, 0x6d, 0x56, 0xd5, 0xfd, 0xbd,
	0x01, 0x3b, 0x3a, 0xfa, 0x8e, 0xa6, 0x13, 0x16, 0x51, 0x1c, 0xc0, 0x76, 0x61, 0xd7, 0xd8, 0x2a,
	0xcc, 0x28, 0xbb, 0x43, 0xad, 0x14, 0xe3, 0xd5, 0xbf, 0xfd, 0xf8, 0xf5, 0xdd, 0x3e, 0xf0, 0xb6,
	0x82, 0x49, 0x27, 0x30, 0xc8, 0x17, 0x9b, 0xfa, 0x85, 0x04, 0xe0, 0x66, 0xdf, 0x78, 0x54, 0x18,
	0x71, 0xeb, 0x10, 0xab, 0x11, 0x78, 0x27, 0x43, 0x7c, 0xcd, 0x96, 0xfa, 0xd2, 0x80, 0x82, 0x47,
	0xd7, 0xc8, 0x60, 0x6b, 0x7e, 0x51, 0xd8, 0x2c, 0x0c, 0x29, 0xb9, 0x5c, 0xad, 0xb5, 0xa2, 0x22,
	0xdf, 0xb2, 0x57, 0x55, 0xcc, 0x1d, 0x2c, 0xd8, 0xc2, 0x8f, 0xb0, 0xd9, 0xa3, 0xf2, 0x94, 0x92,
	0x18, 0x0f, 0x17, 0xad, 0x64, 0x51, 0x03, 0xd8, 0x2b, 0x24, 0xb3, 0x8c, 0xf7, 0x40, 0x0d, 0x6c,
	0x60, 0xbd, 0xcc, 0x44, 0x70, 0x41, 0x49, 0xac, 0xcc, 0x5c, 0x80, 0xd3, 0xa3, 0xf2, 0x84, 0x0f,
	0x87, 0x4c, 0x62, 0x7d, 0x91, 0x91, 0xc7, 0x0d, 0x65, 0xbf, 0x78, 0x33, 0x95, 0xf3, 0x1e, 0x2a,
	0x4e, 0x0b, 0x1b, 0xa5, 0x9c, 0x48, 0x15, 0x29, 0x12, 0x07, 0x27, 0x73, 0x9e, 0x89, 0x13, 0x0b,
	0xa4, 0x59, 0xdc, 0x90, 0x8e, 0x96, 0xa5, 0xf5, 0xb6, 0xee, 0x2b, 0x68, 0x1d, 0x0f, 0x4b, 0x2f,
	0x94, 0xbb, 0xc3, 0x2f, 0x50, 0xc9, 0x3a, 0x73, 0x9d, 0x02, 0x1b, 0xb7, 0x66, 0xea, 0x8c, 0x81,
	0x36, 0x97, 0x17, 0x68, 0xec, 0xca, 0x9d, 0x5e, 0x1b, 0xb3, 0xaf, 0xd6, 0x3f, 0xd8, 0x93, 0xce,
	0xf9, 0x7f, 0xea, 0xef, 0xf3, 0xe4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0x6c, 0x88, 0xcb,
	0xbe, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectServiceClient interface {
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	GetHead(ctx context.Context, in *GetHeadRequest, opts ...grpc.CallOption) (*Head, error)
	GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*Commit, error)
	ListHeads(ctx context.Context, in *ListHeadsRequest, opts ...grpc.CallOption) (*ListHeadsResponse, error)
	ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsResponse, error)
}

type projectServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectServiceClient(cc *grpc.ClientConn) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/velocity.v1.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/velocity.v1.ProjectService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/velocity.v1.ProjectService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetHead(ctx context.Context, in *GetHeadRequest, opts ...grpc.CallOption) (*Head, error) {
	out := new(Head)
	err := c.cc.Invoke(ctx, "/velocity.v1.ProjectService/GetHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := c.cc.Invoke(ctx, "/velocity.v1.ProjectService/GetCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListHeads(ctx context.Context, in *ListHeadsRequest, opts ...grpc.CallOption) (*ListHeadsResponse, error) {
	out := new(ListHeadsResponse)
	err := c.cc.Invoke(ctx, "/velocity.v1.ProjectService/ListHeads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsResponse, error) {
	out := new(ListCommitsResponse)
	err := c.cc.Invoke(ctx, "/velocity.v1.ProjectService/ListCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
type ProjectServiceServer interface {
	CreateProject(context.Context, *CreateProjectRequest) (*Project, error)
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	GetHead(context.Context, *GetHeadRequest) (*Head, error)
	GetCommit(context.Context, *GetCommitRequest) (*Commit, error)
	ListHeads(context.Context, *ListHeadsRequest) (*ListHeadsResponse, error)
	ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsResponse, error)
}

// UnimplementedProjectServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (*UnimplementedProjectServiceServer) CreateProject(ctx context.Context, req *CreateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedProjectServiceServer) GetProject(ctx context.Context, req *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedProjectServiceServer) ListProjects(ctx context.Context, req *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedProjectServiceServer) GetHead(ctx context.Context, req *GetHeadRequest) (*Head, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHead not implemented")
}
func (*UnimplementedProjectServiceServer) GetCommit(ctx context.Context, req *GetCommitRequest) (*Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommit not implemented")
}
func (*UnimplementedProjectServiceServer) ListHeads(ctx context.Context, req *ListHeadsRequest) (*ListHeadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHeads not implemented")
}
func (*UnimplementedProjectServiceServer) ListCommits(ctx context.Context, req *ListCommitsRequest) (*ListCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}

func RegisterProjectServiceServer(s *grpc.Server, srv ProjectServiceServer) {
	s.RegisterService(&_ProjectService_serviceDesc, srv)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/velocity.v1.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/velocity.v1.ProjectService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/velocity.v1.ProjectService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/velocity.v1.ProjectService/GetHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetHead(ctx, req.(*GetHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/velocity.v1.ProjectService/GetCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetCommit(ctx, req.(*GetCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListHeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHeadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListHeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/velocity.v1.ProjectService/ListHeads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListHeads(ctx, req.(*ListHeadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/velocity.v1.ProjectService/ListCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListCommits(ctx, req.(*ListCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "velocity.v1.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectService_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ProjectService_ListProjects_Handler,
		},
		{
			MethodName: "GetHead",
			Handler:    _ProjectService_GetHead_Handler,
		},
		{
			MethodName: "GetCommit",
			Handler:    _ProjectService_GetCommit_Handler,
		},
		{
			MethodName: "ListHeads",
			Handler:    _ProjectService_ListHeads_Handler,
		},
		{
			MethodName: "ListCommits",
			Handler:    _ProjectService_ListCommits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project.proto",
}
