// Code generated by protoc-gen-go. DO NOT EDIT.
// source: action.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Action_Status int32

const (
	Action_WAITING   Action_Status = 0
	Action_BUILDING  Action_Status = 1
	Action_SUCCEEDED Action_Status = 2
	Action_FAILED    Action_Status = 3
)

var Action_Status_name = map[int32]string{
	0: "WAITING",
	1: "BUILDING",
	2: "SUCCEEDED",
	3: "FAILED",
}

var Action_Status_value = map[string]int32{
	"WAITING":   0,
	"BUILDING":  1,
	"SUCCEEDED": 2,
	"FAILED":    3,
}

func (x Action_Status) String() string {
	return proto.EnumName(Action_Status_name, int32(x))
}

func (Action_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{0, 0}
}

type Action struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskId               string               `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Setup                *Setup               `protobuf:"bytes,3,opt,name=setup,proto3" json:"setup,omitempty"`
	Step                 *Step                `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`
	Streams              []*Stream            `protobuf:"bytes,5,rep,name=streams,proto3" json:"streams,omitempty"`
	Status               Action_Status        `protobuf:"varint,20,opt,name=status,proto3,enum=velocity.v1.Action_Status" json:"status,omitempty"`
	StartedAt            *timestamp.Timestamp `protobuf:"bytes,21,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{0}
}

func (m *Action) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Action.Unmarshal(m, b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Action.Marshal(b, m, deterministic)
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return xxx_messageInfo_Action.Size(m)
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Action) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *Action) GetSetup() *Setup {
	if m != nil {
		return m.Setup
	}
	return nil
}

func (m *Action) GetStep() *Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *Action) GetStreams() []*Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *Action) GetStatus() Action_Status {
	if m != nil {
		return m.Status
	}
	return Action_WAITING
}

func (m *Action) GetStartedAt() *timestamp.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *Action) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Setup struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch               string      `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitHash           string      `protobuf:"bytes,3,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Setup) Reset()         { *m = Setup{} }
func (m *Setup) String() string { return proto.CompactTextString(m) }
func (*Setup) ProtoMessage()    {}
func (*Setup) Descriptor() ([]byte, []int) {
	return fileDescriptor_59885c909ad4dfd3, []int{1}
}

func (m *Setup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Setup.Unmarshal(m, b)
}
func (m *Setup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Setup.Marshal(b, m, deterministic)
}
func (m *Setup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Setup.Merge(m, src)
}
func (m *Setup) XXX_Size() int {
	return xxx_messageInfo_Setup.Size(m)
}
func (m *Setup) XXX_DiscardUnknown() {
	xxx_messageInfo_Setup.DiscardUnknown(m)
}

var xxx_messageInfo_Setup proto.InternalMessageInfo

func (m *Setup) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *Setup) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Setup) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

func init() {
	proto.RegisterEnum("velocity.v1.Action_Status", Action_Status_name, Action_Status_value)
	proto.RegisterType((*Action)(nil), "velocity.v1.Action")
	proto.RegisterType((*Setup)(nil), "velocity.v1.Setup")
}

func init() { proto.RegisterFile("action.proto", fileDescriptor_59885c909ad4dfd3) }

var fileDescriptor_59885c909ad4dfd3 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x6f, 0xd3, 0x40,
	0x10, 0x85, 0xb1, 0x93, 0x38, 0x64, 0x1c, 0xaa, 0x30, 0x40, 0x6b, 0xe5, 0xd2, 0x28, 0x12, 0x92,
	0x2f, 0x6c, 0x55, 0x73, 0x40, 0x5c, 0x90, 0xdc, 0x26, 0x80, 0xa5, 0x8a, 0xc3, 0xa6, 0x15, 0x12,
	0x97, 0x68, 0x13, 0x2f, 0xcd, 0x8a, 0xba, 0x6b, 0x79, 0x27, 0x91, 0xf2, 0x5b, 0xf8, 0xb3, 0xc8,
	0xbb, 0x36, 0x24, 0x5c, 0x7a, 0xf3, 0xdb, 0xf7, 0x8d, 0xfc, 0x66, 0x1e, 0x0c, 0xc5, 0x9a, 0x94,
	0x7e, 0x64, 0x65, 0xa5, 0x49, 0x63, 0xb8, 0x93, 0x0f, 0x7a, 0xad, 0x68, 0xcf, 0x76, 0x97, 0xe3,
	0x51, 0x25, 0x4b, 0x6d, 0x14, 0xe9, 0x6a, 0xef, 0xec, 0x31, 0x18, 0x92, 0x65, 0xf3, 0x3d, 0x34,
	0x54, 0x49, 0x51, 0x34, 0xea, 0xfc, 0x5e, 0xeb, 0xfb, 0x07, 0x79, 0x61, 0xd5, 0x6a, 0xfb, 0xf3,
	0x82, 0x54, 0x21, 0x0d, 0x89, 0xa2, 0xc1, 0xa7, 0xbf, 0x3b, 0x10, 0xa4, 0xf6, 0x57, 0x78, 0x02,
	0xbe, 0xca, 0x23, 0x6f, 0xe2, 0xc5, 0x03, 0xee, 0xab, 0x1c, 0xcf, 0xa0, 0x4f, 0xc2, 0xfc, 0x5a,
	0xaa, 0x3c, 0xf2, 0xed, 0x63, 0x50, 0xcb, 0x2c, 0xc7, 0x18, 0x7a, 0x46, 0xd2, 0xb6, 0x8c, 0x3a,
	0x13, 0x2f, 0x0e, 0x13, 0x64, 0x07, 0xe9, 0xd8, 0xa2, 0x76, 0xb8, 0x03, 0xf0, 0x2d, 0x74, 0xeb,
	0x68, 0x51, 0xd7, 0x82, 0x2f, 0x8f, 0x41, 0x92, 0x25, 0xb7, 0x36, 0xbe, 0x83, 0xbe, 0x4b, 0x6d,
	0xa2, 0xde, 0xa4, 0x13, 0x87, 0xc9, 0xab, 0xff, 0xc8, 0xda, 0xe3, 0x2d, 0x83, 0x09, 0x04, 0x86,
	0x04, 0x6d, 0x4d, 0xf4, 0x7a, 0xe2, 0xc5, 0x27, 0xc9, 0xf8, 0x88, 0x76, 0xdb, 0xb0, 0x85, 0x25,
	0x78, 0x43, 0xe2, 0x47, 0x00, 0x43, 0xa2, 0x22, 0x99, 0x2f, 0x05, 0x45, 0x6f, 0x6c, 0x9e, 0x31,
	0x73, 0xd7, 0x61, 0xed, 0x75, 0xd8, 0x6d, 0x7b, 0x1d, 0x3e, 0x68, 0xe8, 0x94, 0xea, 0xd1, 0x6d,
	0x99, 0x8b, 0x66, 0xf4, 0xf4, 0xe9, 0xd1, 0x86, 0x4e, 0x69, 0xfa, 0x09, 0x02, 0x97, 0x03, 0x43,
	0xe8, 0x7f, 0x4f, 0xb3, 0xdb, 0xec, 0xdb, 0x97, 0xd1, 0x33, 0x1c, 0xc2, 0xf3, 0xab, 0xbb, 0xec,
	0x66, 0x56, 0x2b, 0x0f, 0x5f, 0xc0, 0x60, 0x71, 0x77, 0x7d, 0x3d, 0x9f, 0xcf, 0xe6, 0xb3, 0x91,
	0x8f, 0x00, 0xc1, 0xe7, 0x34, 0xbb, 0x99, 0xcf, 0x46, 0x9d, 0xe9, 0x1e, 0x7a, 0xf6, 0x9e, 0xf8,
	0x01, 0xe0, 0x5f, 0xeb, 0xb6, 0xa3, 0x30, 0x39, 0x3b, 0x5a, 0x9b, 0xff, 0xb5, 0xf9, 0x01, 0x8a,
	0xa7, 0x10, 0xac, 0x2a, 0xf1, 0xb8, 0xde, 0xb4, 0x1d, 0x3a, 0x85, 0xe7, 0x10, 0xae, 0x75, 0x51,
	0x28, 0x5a, 0x6e, 0x84, 0xd9, 0xd8, 0x26, 0x07, 0x1c, 0xdc, 0xd3, 0x57, 0x61, 0x36, 0x57, 0xdd,
	0x1f, 0xfe, 0xee, 0x72, 0x15, 0xd8, 0xfd, 0xde, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xb2,
	0x95, 0xbc, 0x8f, 0x02, 0x00, 0x00,
}
